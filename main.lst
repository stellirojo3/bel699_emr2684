


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: Estela Rojas and Ben Liu
    3 00000000         ; Date Created: 2/14/2017
    4 00000000         ; Last Modified: 10/7/2019
    5 00000000         ; You are given a simple stepper motor software system w
                       ith one input and
    6 00000000         ; four outputs. This program runs, but you are asked to 
                       add minimally intrusive
    7 00000000         ; debugging instruments to verify it is running properly
                       . 
    8 00000000         ; The system outputs in one of three modes:
    9 00000000         ; 1) cycles through 10,6,5,9,... at a constant rate
   10 00000000         ; 2) cycles through 5,6,10,9,... at a constant rate
   11 00000000         ; 3) does not change the output, but still outputs at a 
                       constant rate
   12 00000000         ; When PA4 goes high and low again, the system cycles th
                       rough these modes
   13 00000000         ; The output rate will be different on the simulator ver
                       sus the real board
   14 00000000         ;   Insert debugging instruments which gather data (stat
                       e and timing)
   15 00000000         ;   to verify that the system is functioning as expected
                       .
   16 00000000         ; Hardware connections (External: One button and four ou
                       tputs to stepper motor)
   17 00000000         ;  PA4 is Button input  (1 means pressed, 0 means not pr
                       essed)
   18 00000000         ;  PE3-0 are stepper motor outputs 
   19 00000000         ;  PF2 is Blue LED on Launchpad used as a heartbeat
   20 00000000         ; Instrumentation data to be gathered is as follows:
   21 00000000         ; After every output to Port E, collect one state and ti
                       me entry. 
   22 00000000         ; The state information is the 5 bits on Port A bit 4 an
                       d Port E PE3-0
   23 00000000         ;   place one 8-bit entry in your Data Buffer  
   24 00000000         ; The time information is the 24-bit time difference bet
                       ween this output and the previous (in 12.5ns units)
   25 00000000         ;   place one 32-bit entry in the Time Buffer
   26 00000000         ;    24-bit value of the SysTick's Current register (NVI
                       C_ST_CURRENT_R)
   27 00000000         ;    you must handle the roll over as Current goes 3,2,1
                       ,0,0x00FFFFFF,0xFFFFFE,
   28 00000000         ; Note: The size of both buffers is 100 entries. Once yo
                       u fill these
   29 00000000         ;       entries you should stop collecting data
   30 00000000         ; The heartbeat is an indicator of the running of the pr
                       ogram. 
   31 00000000         ; On each iteration of the main loop of your program tog
                       gle the 
   32 00000000         ; LED to indicate that your code(system) is live (not st
                       uck or dead).
   33 00000000         
   34 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   35 00000000 E000E018 
                       NVIC_ST_CURRENT_R
                               EQU              0xE000E018
   36 00000000 400043FC 



ARM Macro Assembler    Page 2 


                       GPIO_PORTA_DATA_R
                               EQU              0x400043FC
   37 00000000 40004400 
                       GPIO_PORTA_DIR_R
                               EQU              0x40004400
   38 00000000 4000451C 
                       GPIO_PORTA_DEN_R
                               EQU              0x4000451C
   39 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   40 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   41 00000000 4002451C 
                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   42 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   43 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   44 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   45 00000000         ; RAM Area
   46 00000000                 AREA             DATA, ALIGN=2
   47 00000000 00 00 00 
              00       Index   SPACE            4           ; index into Steppe
                                                            r table 0,1,2,3
   48 00000004 00 00 00 
              00       Direction
                               SPACE            4           ; -1 for CCW, 0 for
                                                             stop 1 for CW
   49 00000008 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 3 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       DataBuffer
                               SPACE            100         ;stores 8 bit entri
                                                            es
   50 0000006C 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 5 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       TimeBuffer
                               SPACE            400         ;stores 32 bit entr
                                                            ies
   51 000001FC 00 00 00 
              00       DataPt  SPACE            4
   52 00000200 00 00 00 
              00       TimePt  SPACE            4
   53 00000204 00 00 00 
              00       TimeBefore
                               SPACE            4
   54 00000208         
   55 00000208         ;place your debug variables in RAM here
   56 00000208         
   57 00000208         ; ROM Area
   58 00000208                 IMPORT           TExaS_Init
   59 00000208                 IMPORT           SysTick_Init
   60 00000208         ;-UUU-Import routine(s) from other assembly files (like 
                       SysTick.s) here
   61 00000208                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   62 00000000                 THUMB
   63 00000000 05 06 0A 
              09       Stepper DCB              5,6,10,9
   64 00000004                 EXPORT           Start
   65 00000004         
   66 00000004         Start                                ;from start to step
                                                            per_init: instruc =
                                                             28
   67 00000004         ; TExaS_Init sets bus clock at 80 MHz
   68 00000004         ; PA4, PE3-PE0 out logic analyzer to TExasDisplay
   69 00000004 486B            LDR              R0,=SendDataToLogicAnalyzer
   70 00000006 F040 0001       ORR              R0,R0,#1



ARM Macro Assembler    Page 6 


   71 0000000A F7FF FFFE       BL               TExaS_Init  ; logic analyzer, 8
                                                            0 MHz
   72 0000000E         ;place your initializations here
   73 0000000E F000 F821       BL               Stepper_Init ; initialize stepp
                                                            er motor
   74 00000012 F000 F839       BL               Switch_Init ; initialize switch
                                                             input
   75 00000016         ;**********************
   76 00000016 F000 F86D       BL               Debug_Init  ;(you write this)
   77 0000001A         ;**********************
   78 0000001A B662            CPSIE            I           ; TExaS logic analy
                                                            zer runs on interru
                                                            pts
   79 0000001C F04F 0500       MOV              R5,#0       ; last PA4
   80 00000020         loop
   81 00000020 F000 F8B3       BL               Heartbeat
   82 00000024 4964            LDR              R1,=GPIO_PORTA_DATA_R
   83 00000026 680C            LDR              R4,[R1]     ;current value of s
                                                            witch
   84 00000028 F004 0410       AND              R4,R4,#0x10 ; select just bit 4
                                                            
   85 0000002C 2C00            CMP              R4,#0
   86 0000002E D00A            BEQ              no          ; skip if not pushe
                                                            d
   87 00000030 2D00            CMP              R5,#0
   88 00000032 D108            BNE              no          ; skip if pushed la
                                                            st time
   89 00000034         ; this time yes, last time no
   90 00000034 4961            LDR              R1,=Direction
   91 00000036 6808            LDR              R0,[R1]     ; current direction
                                                            
   92 00000038 F100 0001       ADD              R0,R0,#1    ;-1,0,1 to 0,1,2
   93 0000003C 2802            CMP              R0,#2
   94 0000003E D101            BNE              ok
   95 00000040 F04F 30FF       MOV              R0,#-1      ; cycles through va
                                                            lues -1,0,1
   96 00000044 6008    ok      STR              R0,[R1]     ; Direction=0 (CW) 
                                                             
   97 00000046 4625    no      MOV              R5,R4       ; setup for next ti
                                                            me ;17 instruc from
                                                             start of loop to h
                                                            ere
   98 00000048 F000 F841       BL               Stepper_Step
   99 0000004C 485C            LDR              R0,=1600000
  100 0000004E F000 F84E       BL               Wait        ; time delay fixed 
                                                            but not accurate   
                                                            
  101 00000052 E7E5            B                loop        ;3200004 from after
                                                             stepper to here
  102 00000054         ;Initialize stepper motor interface
  103 00000054         Stepper_Init                         ;instructions in st
                                                            epper_int = 21
  104 00000054 F04F 0001       MOV              R0,#1
  105 00000058 4958            LDR              R1,=Direction
  106 0000005A 6008            STR              R0,[R1]     ; Direction=0 (CW)
  107 0000005C F04F 0000       MOV              R0,#0
  108 00000060 4958            LDR              R1,=Index
  109 00000062 6008            STR              R0,[R1]     ; Index=0
  110 00000064         ; activate clock for Port E



ARM Macro Assembler    Page 7 


  111 00000064 4958            LDR              R1, =SYSCTL_RCGCGPIO_R
  112 00000066 6808            LDR              R0, [R1]
  113 00000068 F040 0010       ORR              R0, R0, #0x10 ; Clock for E
  114 0000006C 6008            STR              R0, [R1]
  115 0000006E BF00            NOP
  116 00000070 BF00            NOP                          ; allow time to fin
                                                            ish activating
  117 00000072         ; set direction register
  118 00000072 4956            LDR              R1, =GPIO_PORTE_DIR_R
  119 00000074 6808            LDR              R0, [R1]
  120 00000076 F040 000F       ORR              R0, R0, #0x0F 
                                                            ; Output on PE0-PE3
                                                            
  121 0000007A 6008            STR              R0, [R1]
  122 0000007C         ; enable digital port
  123 0000007C 4954            LDR              R1, =GPIO_PORTE_DEN_R
  124 0000007E 6808            LDR              R0, [R1]
  125 00000080 F040 000F       ORR              R0, R0, #0x0F ; enable PE3-0
  126 00000084 6008            STR              R0, [R1]
  127 00000086 4770            BX               LR
  128 00000088         
  129 00000088         ;Initialize switch interface
  130 00000088         Switch_Init                          ;instructions in sw
                                                            itch_init = 29
  131 00000088         ; activate clock for Port A
  132 00000088 494F            LDR              R1, =SYSCTL_RCGCGPIO_R
  133 0000008A 6808            LDR              R0, [R1]
  134 0000008C F040 0001       ORR              R0, R0, #0x01 ; Clock for A
  135 00000090 6008            STR              R0, [R1]
  136 00000092 BF00            NOP
  137 00000094 BF00            NOP                          ; allow time to fin
                                                            ish activating
  138 00000096         ; activate clock for Port F
  139 00000096 494C            LDR              R1, =SYSCTL_RCGCGPIO_R
  140 00000098 6808            LDR              R0, [R1]
  141 0000009A F040 0020       ORR              R0, R0, #0x20 ; Clock for F
  142 0000009E 6008            STR              R0, [R1]
  143 000000A0 BF00            NOP
  144 000000A2 BF00            NOP                          ; allow time to fin
                                                            ish activating
  145 000000A4         
  146 000000A4         ; set direction register
  147 000000A4 494B            LDR              R1, =GPIO_PORTA_DIR_R
  148 000000A6 6808            LDR              R0, [R1]
  149 000000A8 F020 0010       BIC              R0, R0, #0x10 ; Input on PA4
  150 000000AC 6008            STR              R0, [R1]
  151 000000AE         ; set direction register for PF2
  152 000000AE 494A            LDR              R1, =GPIO_PORTF_DIR_R
  153 000000B0 6808            LDR              R0, [R1]
  154 000000B2 F040 0004       ORR              R0, R0, #0x04 ; Output on PF2
  155 000000B6 6008            STR              R0, [R1]
  156 000000B8         
  157 000000B8         ; 5) enable digital port
  158 000000B8 4948            LDR              R1, =GPIO_PORTA_DEN_R
  159 000000BA 6808            LDR              R0, [R1]
  160 000000BC F040 0010       ORR              R0, R0, #0x10 ; enable PA4
  161 000000C0 6008            STR              R0, [R1]
  162 000000C2         ; enable digital port for PF2
  163 000000C2 4947            LDR              R1, =GPIO_PORTF_DEN_R



ARM Macro Assembler    Page 8 


  164 000000C4 6808            LDR              R0, [R1]
  165 000000C6 F040 0004       ORR              R0, R0, #0x04 ; enable PA4
  166 000000CA 6008            STR              R0, [R1]
  167 000000CC 4770            BX               LR
  168 000000CE         ; Step the motor clockwise
  169 000000CE         ; Direction determines the rotational direction
  170 000000CE         ; Input: None
  171 000000CE         ; Output: None
  172 000000CE         Stepper_Step                         ;instruction in ste
                                                            pper_step = 17 
  173 000000CE B510            PUSH             {R4,LR}
  174 000000D0 493C            LDR              R1,=Index
  175 000000D2 680A            LDR              R2,[R1]     ; old Index
  176 000000D4 4B39            LDR              R3,=Direction
  177 000000D6 6818            LDR              R0,[R3]     ; -1 for CCW, 0 for
                                                             stop 1 for CW
  178 000000D8 4402            ADD              R2,R2,R0
  179 000000DA F002 0203       AND              R2,R2,#3    ; 0,1,2,3,0,1,2,...
                                                            
  180 000000DE 600A            STR              R2,[R1]     ; new Index
  181 000000E0 4B40            LDR              R3,=Stepper ; table
  182 000000E2 5CD0            LDRB             R0,[R2,R3]  ; next output: 5,6,
                                                            10,9,5,6,10,...
  183 000000E4 4940            LDR              R1,=GPIO_PORTE_DATA_R 
                                                            ; change PE3-PE0
  184 000000E6 6008            STR              R0,[R1]
  185 000000E8 F000 F827       BL               Debug_Capture
  186 000000EC BD10            POP              {R4,PC}
  187 000000EE         ; inaccurate and inefficient time delay
  188 000000EE         Wait
  189 000000EE 1E40            SUBS             R0,R0,#1    ; outer loop
  190 000000F0 D1FD            BNE              Wait
  191 000000F2 4770            BX               LR
  192 000000F4         
  193 000000F4         Debug_Init                           ;#instruc in Debug_
                                                            init = 24
  194 000000F4 B51F            PUSH             {R0-R4,LR}
  195 000000F6         ; you write this
  196 000000F6         ;set all entries of first DataBuffer to 0xFF
  197 000000F6 F04F 0000       MOV              R0, #0x00   ;array element coun
                                                            ter
  198 000000FA F04F 01FF       MOV              R1, #0xFF
  199 000000FE 4A3B            LDR              R2, =DataBuffer
  200 00000100 5411    again   STRB             R1, [R2,R0]
  201 00000102 F100 0001       ADD              R0, R0, #1
  202 00000106 2864            CMP              R0, #100    ;check if at end of
                                                             array
  203 00000108 D1FA            BNE              again
  204 0000010A         ;set all entries of first TimeBuffer to 0xFFFFFFFF
  205 0000010A F04F 0000       MOV              R0, #0x00
  206 0000010E F04F 31FF       MOV              R1, #0xFFFFFFFF
  207 00000112 4A37            LDR              R2, =TimeBuffer
  208 00000114 5011    again2  STR              R1, [R2,R0]
  209 00000116 F100 0004       ADD              R0, R0, #4
  210 0000011A F5B0 7FC8       CMP              R0, #400    ;check if at end of
                                                             array
  211 0000011E D1F9            BNE              again2
  212 00000120         
  213 00000120         ;initialize 2 pointers at beginnig of each buffer



ARM Macro Assembler    Page 9 


  214 00000120 4932            LDR              R1, =DataBuffer
  215 00000122 4834            LDR              R0, =DataPt
  216 00000124 6001            STR              R1, [R0]    ;DataPt points to D
                                                            ataBuffer[0]
  217 00000126         
  218 00000126 4932            LDR              R1, =TimeBuffer
  219 00000128 4833            LDR              R0, =TimePt
  220 0000012A 6001            STR              R1, [R0]    ;TimePt points to T
                                                            imeBuffer[0]
  221 0000012C         
  222 0000012C         ;active the SysTick timer
  223 0000012C F7FF FFFE       BL               SysTick_Init
  224 00000130         
  225 00000130         ;read 1st time
  226 00000130 4832            LDR              R0, =NVIC_ST_CURRENT_R
  227 00000132 6801            LDR              R1, [R0]
  228 00000134 4A32            LDR              R2, =TimeBefore
  229 00000136 6011            STR              R1, [R2]    ;arbitary 1st clock
                                                             read
  230 00000138 BD1F            POP              {R0-R4,PC}
  231 0000013A         
  232 0000013A         
  233 0000013A         ;Debug capture      
  234 0000013A         Debug_Capture                        ;#instruc debug cap
                                                            uture = 36
  235 0000013A B57F            PUSH             {R0-R6,LR}
  236 0000013C         ; you write this
  237 0000013C         ;save all registers used
  238 0000013C         ;***return immediately if the buffers are full
  239 0000013C 482B            LDR              R0, =DataBuffer ;starting array
                                                             address
  240 0000013E F100 0064       ADD              R0, R0, #100 ;end array address
                                                            
  241 00000142 492C            LDR              R1, =DataPt
  242 00000144 680A            LDR              R2, [R1]    ;DataPt location
  243 00000146 4290            CMP              R0, R2      ;check if DataBuffe
                                                            r full
  244 00000148 D01E            BEQ              done
  245 0000014A         ;read port A and E and the SysTick timer
  246 0000014A 481B            LDR              R0, =GPIO_PORTA_DATA_R
  247 0000014C 6801            LDR              R1, [R0]    ;PortA read
  248 0000014E 4A26            LDR              R2, =GPIO_PORTE_DATA_R
  249 00000150 6813            LDR              R3, [R2]    ;PortE read
  250 00000152 4C2A            LDR              R4, =NVIC_ST_CURRENT_R
  251 00000154 6825            LDR              R5, [R4]    ;SysTick read = R5
  252 00000156         
  253 00000156         ;mask, combining just bits PA4, PE3, PE2, PE1, PE0 into 
                       one 8-bit value
  254 00000156 F001 0010       AND              R0,R1, #0x10 ;isloate PA4
  255 0000015A F003 020F       AND              R2,R3, #0x0F ;isolate PE3-PE0
  256 0000015E EA40 0002       ORR              R0,R0,R2    ;R0 = comb 8 bit va
                                                            l
  257 00000162         ;dump data into DataBuffer using DataPt
  258 00000162 4924            LDR              R1, =DataPt
  259 00000164 680A            LDR              R2, [R1]    ;array pointer
  260 00000166 7010            STRB             R0, [R2]
  261 00000168         ;incr DataPt to next address
  262 00000168 F102 0201       ADD              R2, R2, #1
  263 0000016C 600A            STR              R2, [R1]



ARM Macro Assembler    Page 10 


  264 0000016E         ;calc 24-bit elaspsed time
  265 0000016E 4824            LDR              R0, =TimeBefore
  266 00000170 6801            LDR              R1, [R0]    ;loop before clock 
                                                            read
  267 00000172 EBA1 0605       SUB              R6, R1, R5  ;prev time - curren
                                                            t time (R5)
  268 00000176 F026 467F       AND              R6, R6, #0x00FFFFFF 
                                                            ;R6 = elapsed time
  269 0000017A 6005            STR              R5, [R0]    ;storing current ti
                                                            me for next loop
  270 0000017C         ;dump elapsed time into TimeBuffer using TimePt
  271 0000017C 491E            LDR              R1, =TimePt
  272 0000017E 680A            LDR              R2, [R1]
  273 00000180 6016            STR              R6, [R2]
  274 00000182         ;incr TimePt to next address
  275 00000182 F102 0204       ADD              R2, R2, #4
  276 00000186 600A            STR              R2, [R1]
  277 00000188         ;restore registers
  278 00000188 BD7F    done    POP              {R0-R6,PC}
  279 0000018A         
  280 0000018A         
  281 0000018A         ;INTRUSIVENESS ESTIMATE - Debug_Capture RUN
  282 0000018A         ;TOTAL INSTRUCTIONS = 36 
  283 0000018A         ;TOTAL CYCLES = 36 * 2 = 72
  284 0000018A         ;TOTAL TIME = 72 * 12.5ns = 900 ns
  285 0000018A         ;INTRUSIVENESS ESTIMATE - TIME BETWEEN CALLS
  286 0000018A         ;TOTAL INSTRUCTIONS = est. 3200021
  287 0000018A         ;TOTAL CYCLES = 3200021 * 2 = 6400042
  288 0000018A         ;TOTAL TIME = 6400042 * 12.5 ns = 80000525 ns
  289 0000018A         
  290 0000018A         ;PERCENT OVERHEAD
  291 0000018A         ;900 ns / 80000525 ns = 0.00001125 = 0.00112%
  292 0000018A         
  293 0000018A         Heartbeat                            ;#instruc heartbeat
                                                             = 8
  294 0000018A         ;get PF2 data
  295 0000018A         ;flash continuously?
  296 0000018A B40F            PUSH             {R0-R3}
  297 0000018C         
  298 0000018C 491D            LDR              R1,=GPIO_PORTF_DATA_R
  299 0000018E 6808            LDR              R0,[R1]
  300 00000190 F000 0004       AND              R0,R0, #0x04
  301 00000194 F080 0004       EOR              R0,R0,#0x04
  302 00000198 6008            STR              R0,[R1]
  303 0000019A         
  304 0000019A BC0F            POP              {R0-R3}
  305 0000019C 4770            BX               LR
  306 0000019E         
  307 0000019E         ;# instruc below this =    9  
  308 0000019E         ; edit the following only if you need to move pins from 
                       PA4, PE3-0      
  309 0000019E         ; logic analyzer on the real board
  310 0000019E 40004040 
                       PA4     equ              0x40004040  ; bit-specific addr
                                                            essing
  311 0000019E 4002403C 
                       PE30    equ              0x4002403C  ; bit-specific addr
                                                            essing
  312 0000019E 4000C000 



ARM Macro Assembler    Page 11 


                       UART0_DR_R
                               equ              0x4000C000  ;write to this to s
                                                            end data
  313 0000019E         SendDataToLogicAnalyzer
  314 0000019E 491A            LDR              R1,=PA4
  315 000001A0 6809            LDR              R1,[R1]     ; read PA4
  316 000001A2 481A            LDR              R0,=PE30    ; read PE3-PE0
  317 000001A4 6800            LDR              R0,[R0]
  318 000001A6 EA40 0001       ORR              R0,R0,R1    ;combine into one 5
                                                            -bit value
  319 000001AA F040 0080       ORR              R0,R0,#0x80 ;bit7=1 means digit
                                                            al data
  320 000001AE 4918            LDR              R1,=UART0_DR_R
  321 000001B0 6008            STR              R0,[R1]     ; send data at 10 k
                                                            Hz
  322 000001B2 4770            BX               LR
  323 000001B4         
  324 000001B4         
  325 000001B4                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  326 000001B4                 END                          ; end of file
              00000000 
              400043FC 
              00000000 
              00186A00 
              00000000 
              400FE608 
              40024400 
              4002451C 
              40004400 
              40025400 
              4000451C 
              4002551C 
              00000000 
              400243FC 
              00000000 
              00000000 
              00000000 
              00000000 
              E000E018 
              00000000 
              400253FC 
              40004040 
              4002403C 
              4000C000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\main.d -o.\main.o -I.\RTE\_Lab4 -IC:\Users\estel\AppData\Local\A
rm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\estel\AppData\Local\Arm\
Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__EVAL SETA 1" --
predefine="__UVISION_VERSION SETA 528" --predefine="_RTE_ SETA 1" --predefine="
TM4C123GH6PM SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 46 in file main.s
   Uses
      None
Comment: DATA unused
DataBuffer 00000008

Symbol: DataBuffer
   Definitions
      At line 49 in file main.s
   Uses
      At line 199 in file main.s
      At line 214 in file main.s
      At line 239 in file main.s

DataPt 000001FC

Symbol: DataPt
   Definitions
      At line 51 in file main.s
   Uses
      At line 215 in file main.s
      At line 241 in file main.s
      At line 258 in file main.s

Direction 00000004

Symbol: Direction
   Definitions
      At line 48 in file main.s
   Uses
      At line 90 in file main.s
      At line 105 in file main.s
      At line 176 in file main.s

Index 00000000

Symbol: Index
   Definitions
      At line 47 in file main.s
   Uses
      At line 108 in file main.s
      At line 174 in file main.s

TimeBefore 00000204

Symbol: TimeBefore
   Definitions
      At line 53 in file main.s
   Uses
      At line 228 in file main.s
      At line 265 in file main.s

TimeBuffer 0000006C

Symbol: TimeBuffer



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 50 in file main.s
   Uses
      At line 207 in file main.s
      At line 218 in file main.s

TimePt 00000200

Symbol: TimePt
   Definitions
      At line 52 in file main.s
   Uses
      At line 219 in file main.s
      At line 271 in file main.s

8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 61 in file main.s
   Uses
      None
Comment: .text unused
Debug_Capture 0000013A

Symbol: Debug_Capture
   Definitions
      At line 234 in file main.s
   Uses
      At line 185 in file main.s
Comment: Debug_Capture used once
Debug_Init 000000F4

Symbol: Debug_Init
   Definitions
      At line 193 in file main.s
   Uses
      At line 76 in file main.s
Comment: Debug_Init used once
Heartbeat 0000018A

Symbol: Heartbeat
   Definitions
      At line 293 in file main.s
   Uses
      At line 81 in file main.s
Comment: Heartbeat used once
SendDataToLogicAnalyzer 0000019E

Symbol: SendDataToLogicAnalyzer
   Definitions
      At line 313 in file main.s
   Uses
      At line 69 in file main.s
Comment: SendDataToLogicAnalyzer used once
Start 00000004

Symbol: Start
   Definitions
      At line 66 in file main.s
   Uses
      At line 64 in file main.s
Comment: Start used once
Stepper 00000000

Symbol: Stepper
   Definitions
      At line 63 in file main.s
   Uses
      At line 181 in file main.s
Comment: Stepper used once
Stepper_Init 00000054

Symbol: Stepper_Init



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 103 in file main.s
   Uses
      At line 73 in file main.s
Comment: Stepper_Init used once
Stepper_Step 000000CE

Symbol: Stepper_Step
   Definitions
      At line 172 in file main.s
   Uses
      At line 98 in file main.s
Comment: Stepper_Step used once
Switch_Init 00000088

Symbol: Switch_Init
   Definitions
      At line 130 in file main.s
   Uses
      At line 74 in file main.s
Comment: Switch_Init used once
Wait 000000EE

Symbol: Wait
   Definitions
      At line 188 in file main.s
   Uses
      At line 100 in file main.s
      At line 190 in file main.s

again 00000100

Symbol: again
   Definitions
      At line 200 in file main.s
   Uses
      At line 203 in file main.s
Comment: again used once
again2 00000114

Symbol: again2
   Definitions
      At line 208 in file main.s
   Uses
      At line 211 in file main.s
Comment: again2 used once
done 00000188

Symbol: done
   Definitions
      At line 278 in file main.s
   Uses
      At line 244 in file main.s
Comment: done used once
loop 00000020

Symbol: loop
   Definitions
      At line 80 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 101 in file main.s
Comment: loop used once
no 00000046

Symbol: no
   Definitions
      At line 97 in file main.s
   Uses
      At line 86 in file main.s
      At line 88 in file main.s

ok 00000044

Symbol: ok
   Definitions
      At line 96 in file main.s
   Uses
      At line 94 in file main.s
Comment: ok used once
17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTA_DATA_R 400043FC

Symbol: GPIO_PORTA_DATA_R
   Definitions
      At line 36 in file main.s
   Uses
      At line 82 in file main.s
      At line 246 in file main.s

GPIO_PORTA_DEN_R 4000451C

Symbol: GPIO_PORTA_DEN_R
   Definitions
      At line 38 in file main.s
   Uses
      At line 158 in file main.s
Comment: GPIO_PORTA_DEN_R used once
GPIO_PORTA_DIR_R 40004400

Symbol: GPIO_PORTA_DIR_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 147 in file main.s
Comment: GPIO_PORTA_DIR_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 183 in file main.s
      At line 248 in file main.s

GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 41 in file main.s
   Uses
      At line 123 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 40 in file main.s
   Uses
      At line 118 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 42 in file main.s
   Uses
      At line 298 in file main.s
Comment: GPIO_PORTF_DATA_R used once
GPIO_PORTF_DEN_R 4002551C



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 44 in file main.s
   Uses
      At line 163 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 43 in file main.s
   Uses
      At line 152 in file main.s
Comment: GPIO_PORTF_DIR_R used once
NVIC_ST_CURRENT_R E000E018

Symbol: NVIC_ST_CURRENT_R
   Definitions
      At line 35 in file main.s
   Uses
      At line 226 in file main.s
      At line 250 in file main.s

PA4 40004040

Symbol: PA4
   Definitions
      At line 310 in file main.s
   Uses
      At line 314 in file main.s
Comment: PA4 used once
PE30 4002403C

Symbol: PE30
   Definitions
      At line 311 in file main.s
   Uses
      At line 316 in file main.s
Comment: PE30 used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 111 in file main.s
      At line 132 in file main.s
      At line 139 in file main.s

UART0_DR_R 4000C000

Symbol: UART0_DR_R
   Definitions
      At line 312 in file main.s
   Uses
      At line 320 in file main.s
Comment: UART0_DR_R used once
14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 59 in file main.s
   Uses
      At line 223 in file main.s
Comment: SysTick_Init used once
TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 58 in file main.s
   Uses
      At line 71 in file main.s
Comment: TExaS_Init used once
2 symbols
377 symbols in table
